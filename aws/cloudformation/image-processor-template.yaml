AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for distributed image processing task scheduler'

Parameters:
  StageName:
    Type: String
    Default: dev
    AllowedValues: [ dev, test, prod ]

  handler:
      Default: lambdas.UserService::handleRequest
      Type: String

  SignedUrlServiceHandler:
    Default: lambdas.SignedUrlService::handleRequest
    Type: String

  CorsPreflightLambdaHandler:
    Default: lambdas.CorsPreflightLambda::handleRequest
    Type: String

  MetaDataDBUsername:
    Description: "Username for the image and user metadata database admin account"
    Type: String
    MinLength: 1

  MetaDataDBName:
    Type: String
    Default: MetaDataDB

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

Resources:
  ###### Networking ########
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  UserServiceLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group to allow Lambda access to RDS and connection to secret manager'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCIDR

  MetaDataDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group to allow access RDS'
      VpcId: !Ref VPC 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref UserServiceLambdaSecurityGroup

  UserServiceSecretManagerVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !GetAtt PrivateSubnet1.VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds:
        - !Ref PrivateSubnet1
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref UserServiceLambdaSecurityGroup
  ############################

  ###### Lambdas #############
  UserServiceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserService
      Description: Lambda for handling user creation
      VpcConfig:
        SecurityGroupIds:
          - !Ref UserServiceLambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
      Handler: !Sub '${handler}'
      Role: !GetAtt UserServiceLambdaRole.Arn 
      Runtime: java17
      Timeout: 120
      Code: ../image-processor-lambdas/target/processor-lambda-1.0-SNAPSHOT.jar
      Environment:
        Variables:
          DB_ENDPOINT_ADDRESS: !GetAtt MetaDataDB.Endpoint.Address
          DB_NAME: !Ref MetaDataDBName
          DB_SECRET_NAME: !Ref MetaDataDBCreds

  UserServiceLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UserServiceLambda.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt ImageProcessorUserPool.Arn

  SignedUrlServiceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SignedUrlService
      Description: Lambda for generating signed urls for S3 upload
      Handler: !Sub '${SignedUrlServiceHandler}'
      Role: !GetAtt SignedUrlServiceLambdaRole.Arn
      Runtime: java17
      Timeout: 120
      Code: ../image-processor-lambdas/target/processor-lambda-1.0-SNAPSHOT.jar
      Environment:
        Variables:
          IMAGE_BUCKET_NAME: !Ref ImagesS3Bucket

  CorsPreflightLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CorsPreflightLambda
      Description: Lambda to return proper headers in response to CORS preflight request
      Handler: !Sub '${CorsPreflightLambdaHandler}'
      Role: !GetAtt CorsPreflightLambdaLambdaRole.Arn
      Code: ../image-processor-lambdas/target/processor-lambda-1.0-SNAPSHOT.jar
      Runtime: java17
      Timeout: 10
  ############################

  ###### S3 ##################
  ImagesS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - '*'
      BucketName:
        !Join
        - ''
        - - !Ref 'AWS::Region'
          - '-image-processor-images-bucket'
  ############################

  ###### Databases ###########
  MetaDataDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: 8.0
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref MetaDataDBCreds, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref MetaDataDBCreds, ':SecretString:password}}' ] ]
      DBName: !Ref MetaDataDBName
      PubliclyAccessible: false
      StorageType: gp2
      EnableIAMDatabaseAuthentication: false
      VPCSecurityGroups:
        - !GetAtt MetaDataDBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
  ############################

  ###### API Gateway #########
  ImageProcessorApiGateway:
    Type: AWS::ApiGateway::RestApi
    DependsOn: ApiGatewayCloudwatchRoleArn
    Properties:
      Name: ImageProcessorApi

  ApiGatewayCloudwatchRoleArn:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  ImageProcessorApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: GetServiceUrlMethod
    Properties:
      RestApiId: !Ref ImageProcessorApiGateway

  ImageProcessorApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref StageName
      RestApiId: !Ref ImageProcessorApiGateway
      DeploymentId: !Ref ImageProcessorApiGatewayDeployment
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          DataTraceEnabled: true
          LoggingLevel: INFO
          ThrottlingBurstLimit: 50
          ThrottlingRateLimit: 100
      Variables:
        environment: !Ref StageName

  ImageProcessorApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ImageProcessorApiGateway
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt ImageProcessorUserPool.Arn

  SignedUrlResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ImageProcessorApiGateway
      ParentId: !GetAtt ImageProcessorApiGateway.RootResourceId
      PathPart: signed-url

  GetServiceUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ImageProcessorApiGateway
      ResourceId: !Ref SignedUrlResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ImageProcessorApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignedUrlServiceLambda.Arn}/invocations"

  OptionsServiceUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ImageProcessorApiGateway
      ResourceId: !Ref SignedUrlResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CorsPreflightLambda.Arn}/invocations"
  ############################

  ###### IAM and Secrets #####
  UserServiceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: UserService-lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns: [arn:aws:iam::aws:policy/AWSLambdaExecute, arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole]
      Policies:
        - PolicyName: UserServiceLambdaRDSAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: !Sub
                  - "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${DbiResourceId}/${MetaDataDBUsername}"
                  - DbiResourceId: !GetAtt MetaDataDB.DbiResourceId
        - PolicyName: LambdaGetSecretPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecrets"
                Resource: !Ref MetaDataDBCreds
      Path: "/"

  SignedUrlServiceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SignedUrlService-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: [arn:aws:iam::aws:policy/AWSLambdaExecute]
      Policies:
        - PolicyName: S3PresignedURLPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${ImagesS3Bucket}/*"
                Effect: Allow
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
                Effect: Allow
      Path: "/"

  CorsPreflightLambdaLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CorsPreflightLambda-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: [arn:aws:iam::aws:policy/AWSLambdaExecute]

  MetaDataDBCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${MetaDataDBUsername}"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  # IAM Role for API Gateway to invoke lambdas
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: UserServiceLambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt UserServiceLambda.Arn
        - PolicyName: SignedUrlServiceLambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt SignedUrlServiceLambda.Arn
        - PolicyName: CorsPreflightLambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt CorsPreflightLambda.Arn

  # IAM Role for API Gateway + CloudWatch Logging
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
  ############################

  ###### Cognito ############
  ImageProcessorUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ImageProcessorUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      LambdaConfig:
        PostConfirmation: !GetAtt UserServiceLambda.Arn

  ImageProcessorUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ImageProcessorUserPoolClient
      GenerateSecret: false
      UserPoolId: !Ref ImageProcessorUserPool
  ############################

Outputs:
  MetaDataDBSecretName:
    Value: !Ref MetaDataDBCreds
  MetaDataDBEndpointAddress:
    Value: !GetAtt MetaDataDB.Endpoint.Address
  MetaDataDBName:
    Value: !Ref MetaDataDBName
  Region:
    Value: !Sub "${AWS::Region}"