AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for distributed image processing task scheduler'

Parameters:
  handler:
      Default: lambdas.UserService::handleRequest
      Type: String
  MetaDataDBUsername:
    Description: "Username for the image and user metadata database admin account"
    Type: String
    MinLength: 1
  MetaDataDBName:
    Type: String
    Default: MetaDataDB
  VpcId:
    Type: String

Resources:
  UserServiceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: UserService-lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: UserServiceLambdaRDSAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: !Sub
                  - "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${DbiResourceId}/${MetaDataDBUsername}"
                  - DbiResourceId: !GetAtt MetaDataDB.DbiResourceId
        - PolicyName: LambdaGetSecretPolicy
          PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'secretsmanager:GetSecretValue'
                  Resource: !Ref MetaDataDBCreds
      Path: "/"

  UserServiceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserService
      Description: Lambda for handling user creation
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaToRDSSecurityGroup.GroupId
      Handler: !Sub '${handler}'
      Role: !GetAtt UserServiceLambdaRole.Arn 
      Runtime: java17  
      Code: ../image-processor-lambdas/target/processor-lambda-1.0-SNAPSHOT.jar
      Environment:
        Variables:
          DB_ENDPOINT_ADDRESS: !GetAtt MetaDataDB.Endpoint.Address
          DB_NAME: !Ref MetaDataDBName
          DB_SECRET_ARN: !Ref MetaDataDBCreds

  LambdaToRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group to allow Lambda access to RDS'
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: '0.0.0.0/0'

  MetaDataDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group to allow access MetaDataDB'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LambdaToRDSSecurityGroup

  MetaDataDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: 8.0
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref MetaDataDBCreds, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref MetaDataDBCreds, ':SecretString:password}}' ] ]
      DBName: !Ref MetaDataDBName
      PubliclyAccessible: false
      StorageType: gp2
      EnableIAMDatabaseAuthentication: false
      VPCSecurityGroups:
        - !GetAtt MetaDataDBSecurityGroup.GroupId

  MetaDataDBCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: MetaDataDBCreds
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${MetaDataDBUsername}"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'